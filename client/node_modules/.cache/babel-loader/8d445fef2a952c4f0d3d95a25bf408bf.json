{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList } from './list';\nimport { formatDisplayName } from './displayName';\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\n\nexport function createIntl(config, cache) {\n  var formatters = createFormatters(cache);\n\n  var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n\n  var locale = resolvedConfig.locale,\n      defaultLocale = resolvedConfig.defaultLocale,\n      onError = resolvedConfig.onError;\n\n  if (!locale) {\n    if (onError) {\n      onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\"));\n    } // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n\n\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.NumberFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n  }\n\n  return __assign(__assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat),\n    formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)\n  });\n}","map":{"version":3,"sources":["C:/Users/Skipk/du-bootcamp/budget-view/budget-view/client/node_modules/@formatjs/intl/lib/src/create-intl.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","createFormatters","DEFAULT_INTL_CONFIG","InvalidConfigError","MissingDataError","formatNumber","formatNumberToParts","formatRelativeTime","formatDate","formatDateToParts","formatTime","formatTimeToParts","formatPlural","formatMessage","formatList","formatDisplayName","createIntl","config","cache","formatters","resolvedConfig","locale","defaultLocale","onError","Intl","NumberFormat","supportedLocalesOf","DateTimeFormat","bind","getNumberFormat","getRelativeTimeFormat","getDateTimeFormat","getPluralRules","getListFormat","getDisplayNames"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList } from './list';\nimport { formatDisplayName } from './displayName';\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport function createIntl(config, cache) {\n    var formatters = createFormatters(cache);\n    var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;\n    if (!locale) {\n        if (onError) {\n            onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\"));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.NumberFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n    }\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\n        onError) {\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\" + locale + \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\" + defaultLocale + \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\"));\n    }\n    return __assign(__assign({}, resolvedConfig), { formatters: formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });\n}\n"]},"metadata":{},"sourceType":"module"}