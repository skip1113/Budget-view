{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { parse } from 'intl-messageformat-parser';\nimport * as memoize from 'fast-memoize';\nimport { formatToParts } from './formatters'; // -- MessageFormat --------------------------------------------------------\n\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n\n  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = __assign(__assign({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\n\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, __assign({}, defaultConfig));\n}\n\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        has: function (key) {\n          return key in store;\n        },\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n} // @ts-ignore this is to deal with rollup's default import shenanigans\n\n\nvar _memoizeIntl = memoize.default || memoize;\n\nvar memoizeIntl = _memoizeIntl;\n\nfunction createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n\n  return {\n    getNumberFormat: memoizeIntl(function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArrays([void 0], args)))();\n    }, {\n      cache: createFastMemoizeCache(cache.number),\n      strategy: memoizeIntl.strategies.variadic\n    }),\n    getDateTimeFormat: memoizeIntl(function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArrays([void 0], args)))();\n    }, {\n      cache: createFastMemoizeCache(cache.dateTime),\n      strategy: memoizeIntl.strategies.variadic\n    }),\n    getPluralRules: memoizeIntl(function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArrays([void 0], args)))();\n    }, {\n      cache: createFastMemoizeCache(cache.pluralRules),\n      strategy: memoizeIntl.strategies.variadic\n    })\n  };\n}\n\nvar IntlMessageFormat =\n/** @class */\nfunction () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    var _this = this;\n\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n\n    this.format = function (values) {\n      var parts = _this.formatToParts(values); // Hot path for straight simple msg translations\n\n\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== 0\n        /* literal */\n        || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n\n        return all;\n      }, []);\n\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n\n      return result;\n    };\n\n    this.formatToParts = function (values) {\n      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n\n    this.resolvedOptions = function () {\n      return {\n        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n\n    this.getAst = function () {\n      return _this.ast;\n    };\n\n    if (typeof message === 'string') {\n      this.message = message;\n\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      } // Parse string messages into an AST.\n\n\n      this.ast = IntlMessageFormat.__parse(message, {\n        normalizeHashtagInPlural: false,\n        ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag\n      });\n    } else {\n      this.ast = message;\n    }\n\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    } // Creates a new object with the specified `formats` merged with the default\n    // formats.\n\n\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats); // Defined first because it's used to build the format pattern.\n\n    this.locales = locales;\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function () {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n\n  IntlMessageFormat.formats = {\n    number: {\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n\nexport { IntlMessageFormat };","map":{"version":3,"sources":["C:/Users/Skipk/du-bootcamp/budget-view/budget-view/client/node_modules/intl-messageformat/lib/src/core.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","Array","k","a","j","jl","parse","memoize","formatToParts","mergeConfig","c1","c2","keys","reduce","all","mergeConfigs","defaultConfig","configs","createFastMemoizeCache","store","create","has","key","get","set","value","_memoizeIntl","default","memoizeIntl","createDefaultFormatters","cache","number","dateTime","pluralRules","getNumberFormat","_a","args","_i","Intl","NumberFormat","bind","strategy","strategies","variadic","getDateTimeFormat","DateTimeFormat","getPluralRules","PluralRules","IntlMessageFormat","message","locales","overrideFormats","opts","_this","defaultLocale","formatterCache","format","values","parts","result","part","type","push","ast","formatters","formats","undefined","resolvedOptions","locale","supportedLocalesOf","getAst","__parse","TypeError","normalizeHashtagInPlural","ignoreTag","isArray","defineProperty","memoizedDefaultLocale","enumerable","configurable","currency","style","percent","date","short","month","day","year","medium","long","full","weekday","time","hour","minute","second","timeZoneName"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { parse } from 'intl-messageformat-parser';\nimport * as memoize from 'fast-memoize';\nimport { formatToParts, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function () {\n            return {\n                has: function (key) {\n                    return key in store;\n                },\n                get: function (key) {\n                    return store[key];\n                },\n                set: function (key, value) {\n                    store[key] = value;\n                },\n            };\n        },\n    };\n}\n// @ts-ignore this is to deal with rollup's default import shenanigans\nvar _memoizeIntl = memoize.default || memoize;\nvar memoizeIntl = _memoizeIntl;\nfunction createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoizeIntl(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArrays([void 0], args)))();\n        }, {\n            cache: createFastMemoizeCache(cache.number),\n            strategy: memoizeIntl.strategies.variadic,\n        }),\n        getDateTimeFormat: memoizeIntl(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArrays([void 0], args)))();\n        }, {\n            cache: createFastMemoizeCache(cache.dateTime),\n            strategy: memoizeIntl.strategies.variadic,\n        }),\n        getPluralRules: memoizeIntl(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArrays([void 0], args)))();\n        }, {\n            cache: createFastMemoizeCache(cache.pluralRules),\n            strategy: memoizeIntl.strategies.variadic,\n        }),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function (all, part) {\n                if (!all.length ||\n                    part.type !== 0 /* literal */ ||\n                    typeof all[all.length - 1] !== 'string') {\n                    all.push(part.value);\n                }\n                else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || '';\n            }\n            return result;\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function () { return ({\n            locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\n        }); };\n        this.getAst = function () { return _this.ast; };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, {\n                normalizeHashtagInPlural: false,\n                ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,\n            });\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function () {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\n"]},"metadata":{},"sourceType":"module"}